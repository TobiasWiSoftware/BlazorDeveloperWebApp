@inject IJSRuntime JSRuntime
@implements IDisposable

<header id="header" class="header fixed-top header-scrolled">
    <div class="container-fluid container-xl d-flex align-items-center">
        <a href="/" class="logo d-flex align-items-center scrollto">
            <img src="Pictures/elements/favicon.png" alt="">
            <span>Home</span>
        </a>

        <nav id="navbar" class="navbar @(isExpanded ? "navbar-mobile" : "") )">
            <ul>
                @foreach (var section1 in Sections)
                {
                    <li><a class="nav-link scrollto" @onclick="() => OnClickNavLink(section1.Item2)">@section1.Item1</a></li>
                }
            </ul>
            <i class="bi bi-list mobile-nav-toggle" @onclick="ToggleNavbar"></i>
        </nav><!-- .navbar -->
    </div>
</header><!-- End Header -->
@code {
    private List<Tuple<string, string>> Sections = new List<Tuple<string, string>>
    {
        Tuple.Create("Introduction", "introduction"),
        Tuple.Create("Frontend", "frontend"),
        Tuple.Create("Backend", "backend"),
        Tuple.Create("DevOps", "devops"),
        Tuple.Create("Contact", "contact")
    };

    private bool isExpanded = false;


    public async Task OnClickNavLink(string elementId)
    {
        if (isExpanded)
        {
            ToggleNavbar();
        }
        await JSRuntime.InvokeVoidAsync("scrollToElement", elementId);
    }


    public void ToggleNavbar()
    {
        isExpanded = !isExpanded;
    }

    public void Dispose()
    {
        JSRuntime.InvokeVoidAsync("unregisterScrollEvent");
    }
}
